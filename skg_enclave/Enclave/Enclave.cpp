#include "Enclave_t.h"
#include "sgx_uae_service.h"
#include "sgx_trts.h"
#include "sgx_tcrypto.h"
#include <string.h>
#include <stdio.h>
#include "sgx_tseal.h"
#include "sgx_utils.h"
#include <assert.h>
#include "../App/th_definitions.h"
#include "BlackBoxExecuter.h"


void ocall_print(const char* format, uint32_t number){
    char output[50];
    memset(output,0,50);
    snprintf(output, 50, format, number);
    ocall_print(output);
}

/*SKG enclave internal data*/
uint8_t s_sk[SKG_DATA_SIZE_BYTES];

/*BB enclave internal data*/
uint8_t k[SECRET_KEY_SIZE_BYTES];
BlackBoxExecuter bbx;

/***
[Initialization: no input] - *SKG ENCLAVE CODE*
1. Use SGX hardware randomness to generate shared secret key s
2. Generate an encryption key pair (pk,sk), output pk.
3. Use the "independent attestation" mechanism to generate an Intel-signed quote that "pk was generated by [Secret-Key-Generation Enclave] running in secure mode". This is Qâ€™, output.
4. Seal the data (s,sk) [sealing to MRENCLAVE] and output sealed data. output.
***/
sgx_status_t skg_init(sgx_sealed_data_t* p_sealed_data, size_t sealed_size, 
                      sgx_ec256_public_t* p_pk,size_t pk_size,
                      sgx_target_info_t* p_target_info,
                      sgx_report_t* p_report) {
    
        memset(s_sk, 0, sizeof(s_sk));        
        sgx_status_t status;

        //Use SGX hardware randomness to generate shared secret key s
        status = sgx_read_rand((unsigned char*)s_sk, SECRET_KEY_SIZE_BYTES);        
        ocall_print("sgx_read_rand status is %d\n", status);
        if(status) return status;
        
        //Generate an encryption key pair (pk,sk), output pk
        sgx_ecc_state_handle_t handle;
        sgx_ec256_private_t sk;
    
        status = sgx_ecc256_open_context(&handle);
        ocall_print("sgx_ecc256_open_context status is %d\n", status);
        if(status) return status;
        
        status = sgx_ecc256_create_key_pair(&sk, p_pk, handle);
        ocall_print("sgx_ecc256_create_key_pair status is %d\n", status);
        if(status) return status;        
        memcpy(s_sk + SECRET_KEY_SIZE_BYTES, &sk, sizeof(sgx_ec256_private_t));


        //Create the report for the skg pk attestation quote (Q')
        sgx_report_data_t report_data;
        memset(&report_data, 0, sizeof(report_data));
        memcpy(&report_data, p_pk, sizeof(sgx_ec256_public_t));
                
        status = sgx_create_report(p_target_info, NULL, p_report);
        ocall_print("sgx_create_report status is %d\n", status);
        if(status) return status;

        //Seal the data (s,sk) [sealing to MRENCLAVE] and output sealed data.        
        status = sgx_seal_data(0, NULL, sizeof(s_sk), s_sk, sealed_size, p_sealed_data);
        ocall_print("sgx_seal_data status is %d\n", status);
        if(status) return status;

        return SGX_SUCCESS;
    }




sgx_status_t encrypt_key(uint8_t plaintext[SECRET_KEY_SIZE_BYTES], 
                         uint8_t ciphertext[SECRET_KEY_ENCRYPTED_SIZE_BYTES],
                         uint8_t key[SGX_AESGCM_KEY_SIZE]){

    sgx_status_t status;
    uint8_t* iv = ciphertext + SECRET_KEY_SIZE_BYTES;
    sgx_aes_gcm_128bit_tag_t* p_mac = (sgx_aes_gcm_128bit_tag_t*)(ciphertext + SECRET_KEY_SIZE_BYTES + NIST_RECOMMANDED_IV_SIZE_BYTES);

    status = sgx_read_rand((unsigned char*)iv, NIST_RECOMMANDED_IV_SIZE_BYTES);        
    ocall_print("sgx_read_rand for iv status is %d\n", status);
    if(status) return status;

    status = sgx_rijndael128GCM_encrypt((sgx_aes_gcm_128bit_key_t*)key, 
                                        plaintext,
                                        SECRET_KEY_SIZE_BYTES,
                                        ciphertext,
                                        iv,
                                        NIST_RECOMMANDED_IV_SIZE_BYTES,
                                        NULL,
                                        0,
                                        p_mac);
    
    ocall_print("sgx_rijndael128GCM_encrypt status is %d\n", status);
    if(status) return status;
    
    return SGX_SUCCESS;
}

sgx_status_t decrypt_key(uint8_t plaintext[SECRET_KEY_SIZE_BYTES], 
                         uint8_t ciphertext[SECRET_KEY_ENCRYPTED_SIZE_BYTES],
                         uint8_t key[SGX_AESGCM_KEY_SIZE])
{
    sgx_status_t status;

    uint8_t* iv = ciphertext + SECRET_KEY_SIZE_BYTES;
    sgx_aes_gcm_128bit_tag_t* p_mac = (sgx_aes_gcm_128bit_tag_t*)(ciphertext + SECRET_KEY_SIZE_BYTES + NIST_RECOMMANDED_IV_SIZE_BYTES);
    //Decrypt c
    status = sgx_rijndael128GCM_decrypt((sgx_aes_gcm_128bit_key_t*)key,
                                        ciphertext, 
                                        SECRET_KEY_SIZE_BYTES,
                                        plaintext,
                                        iv,
                                        NIST_RECOMMANDED_IV_SIZE_BYTES,
                                        NULL,
                                        0,
                                        p_mac);
    
    ocall_print("sgx_rijndael128GCM_decrypt status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;
}


/***
[Initialization-step 1: input pk, attestation quote Q']
1. Verify that Q' is a valid Intel-signed quote that "pk was generated by [Secret-Key-Generation Enclave] running in secure mode"
2. Use SGX hardware randomness to generate a symmetric encryption key k.
3. Compute c=E_pk(k)  --- the (public-key) encryption of k under pk
4. Use the "independent attestation" mechanism to generate an Intel-signed quote that "c was generated by [X-Black-Box Enclave] running in secure mode". This is Q, output.
5. Seal (k) [sealing to MRENCLAVE] and output c and sealed data.
***/
sgx_status_t bb_init_1(sgx_sealed_data_t* p_sealed_data, size_t sealed_size, 
                       sgx_ec256_public_t* p_bb_pk, sgx_ec256_public_t* p_skg_pk, size_t pk_size, 
                       uint8_t* k_encrypted, size_t k_encrypted_size,
                       sgx_target_info_t* p_target_info,
                       sgx_report_t* p_report) {

    
    memset(k, 0, sizeof(k));
    sgx_status_t status;
    
    //Use SGX hardware randomness to generate a symmetric encryption key k.
    status = sgx_read_rand((unsigned char*)k, SECRET_KEY_SIZE_BYTES);        
    ocall_print("sgx_read_rand status is %d\n", status);
    if(status) return status;
    
    //Compute c=E_pk(k)  --- the (public-key) encryption of k under pk
    sgx_ecc_state_handle_t handle;
    sgx_ec256_private_t sk;

    status = sgx_ecc256_open_context(&handle);
    ocall_print("sgx_ecc256_open_context status is %d\n", status);
    if(status) return status;
    
    status = sgx_ecc256_create_key_pair(&sk, p_bb_pk, handle);
    ocall_print("sgx_ecc256_create_key_pair status is %d\n", status);
    if(status) return status;
    
    sgx_ec256_dh_shared_t shared_key;
    status = sgx_ecc256_compute_shared_dhkey(&sk,p_skg_pk,&shared_key, handle);
    ocall_print("sgx_ecc256_compute_shared_dhkey status is %d\n", status);
    if(status) return status;

    status = encrypt_key(k,k_encrypted,(uint8_t*)&shared_key);
    ocall_print("encrypt_key status is %d\n", status);
    if(status) return status;

    //Create the report for the bb "c=E_pk(k)" attestation quote (Q)
    sgx_report_data_t report_data;
    memset(&report_data, 0, sizeof(report_data));
    assert(sizeof(sgx_report_data_t) >= k_encrypted_size);
    memcpy(&report_data, k_encrypted, k_encrypted_size);
            
    status = sgx_create_report(p_target_info, NULL, p_report);
    ocall_print("sgx_create_report status is %d\n", status);
    if(status) return status;

    //Seal (k) [sealing to MRENCLAVE]
    status = sgx_seal_data(0, NULL, sizeof(k), k, sealed_size, p_sealed_data);
    ocall_print("sgx_seal_data status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;

    }

/***
[Execution: input pk, sealed data (s,sk), ciphertext c, an attestation quote Q]
1. Verify that Q is a valid Intel-signed quote of the form "c was generated by [X-Black-Box Enclave] running in secure mode"
2. Unseal s,sk (verify that pk matches sk)
3. Decrypt c using sk to get a symmetric encryption key k
4. Compute and output c'=E_k(s) --- the (symmetric) encryption of s under k
***/

sgx_status_t skg_exec(sgx_ec256_public_t* p_bb_pk, sgx_ec256_public_t* p_skg_pk, size_t pk_size,         //in (pk)
                      uint8_t* k_encrypted, size_t k_encrypted_size,        //in (c)
                      sgx_sealed_data_t* p_sealed_s_sk, size_t sealed_size, //in (Seal(s,sk))                                            
                      uint8_t* s_encrypted, size_t s_encrypted_size)         //out (c')
{

    sgx_status_t status;
    
    //Unseal s,sk
    uint8_t s_sk_unsealed[SKG_DATA_SIZE_BYTES];
    uint32_t unsealed_text_length = SKG_DATA_SIZE_BYTES;

    status = sgx_unseal_data(p_sealed_s_sk,
                             NULL,
                             0,
                             s_sk_unsealed, 
                             &unsealed_text_length);
                             
    ocall_print("sgx_unseal_data status is %d\n", status);
    if(status) return status;

    //TODO-remove
    ocall_print("s_sk=s_sk_decrypted? %d\n", memcmp(s_sk_unsealed, s_sk, SKG_DATA_SIZE_BYTES));

    //extract sk 
    sgx_ec256_private_t sk;
    memcpy(&sk, s_sk_unsealed + SECRET_KEY_SIZE_BYTES, sizeof(sgx_ec256_private_t));

    //TODO - verify that pk matches sk
    
    //Decrypt c using sk to get a symmetric encryption key k

    //Initialize the ec256 context
    sgx_ecc_state_handle_t handle;
    status = sgx_ecc256_open_context(&handle);
    ocall_print("sgx_ecc256_open_context status is %d\n", status);
    if(status) return status;
   
    //Compute the shared key with with c was encrypted
    sgx_ec256_dh_shared_t shared_key;
    status = sgx_ecc256_compute_shared_dhkey(&sk,p_bb_pk,&shared_key, handle);
    ocall_print("sgx_ecc256_compute_shared_dhkey status is %d\n", status);
    if(status) return status;    
    
    uint8_t k_decrypted[SECRET_KEY_SIZE_BYTES];
    memset(k_decrypted, 0, SECRET_KEY_SIZE_BYTES);

    status = decrypt_key(k_decrypted, k_encrypted,(uint8_t*)&shared_key);
    ocall_print("decrypt_key status is %d\n", status);
    if(status) return status;

    //TODO-remove
    ocall_print("k=k_decrypted? %d\n", memcmp(k_decrypted, k, SECRET_KEY_SIZE_BYTES));

    status = encrypt_key(s_sk_unsealed, s_encrypted, k_decrypted);
    ocall_print("encrypt_key status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;
}

/***
[Initialization-step 2: input sealed data (k), ciphertext c']
1. Unseal k
2. Decrypt c' with k to get s
3. Seal (s) [to MRENCLAVE] and output sealed data.
***/
sgx_status_t bb_init_2(sgx_sealed_data_t* p_sealed_k,                       //in (Seal(k))
                       uint8_t* s_encrypted, size_t s_encrypted_size,       //in (c')
                       sgx_sealed_data_t* p_sealed_s, size_t sealed_size)  //out (Seal(s))
{
    sgx_status_t status;

    //Unseal k
    uint8_t k_unsealed[SECRET_KEY_SIZE_BYTES];
    uint32_t unsealed_text_length = sizeof(k_unsealed);

    status = sgx_unseal_data(p_sealed_k,
                             NULL,
                             0,
                             k_unsealed, 
                             &unsealed_text_length);
                             
    ocall_print("sgx_unseal_data status is %d\n", status);
    if(status) return status;

    //TODO-remove
    ocall_print("k=k_unsealed? %d\n", memcmp(k_unsealed, k, SECRET_KEY_SIZE_BYTES));

    uint8_t s_decrypted[SECRET_KEY_SIZE_BYTES];
    memset(s_decrypted, 0, SECRET_KEY_SIZE_BYTES);

    //Decrypt c' with k to get s
    status = decrypt_key(s_decrypted, s_encrypted,k_unsealed);
    ocall_print("decrypt_key status is %d\n", status);
    if(status) return status;

    //Seal (s) [to MRENCLAVE] and output sealed data.
    status = sgx_seal_data(0, NULL, sizeof(s_decrypted), s_decrypted, sealed_size, p_sealed_s);
    ocall_print("sgx_seal_data status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;
}



/*
[Execution: input sealed data (s), memory buffer B_in]
1. Unseal s
2. Execute B_out=X_s(B_in)
3. Output B_out
*/
sgx_status_t bb_exec(sgx_sealed_data_t* p_sealed_s,  size_t sealed_size, //in (Seal(s))
                       uint8_t* B_in, size_t B_in_size,                   //in (B_in)
                       uint8_t* B_out, size_t B_out_size)                 //out (B_out)
{
    sgx_status_t status;

    
    if(!bbx.IsInitialized())
    {
        //Unseal s
        uint8_t s_unsealed[SECRET_KEY_SIZE_BYTES];
        uint32_t unsealed_text_length = sizeof(s_unsealed);

        status = sgx_unseal_data(p_sealed_s,
                                NULL,
                                0,
                                s_unsealed, 
                                &unsealed_text_length);
                                
        ocall_print("sgx_unseal_data status is %d\n", status);
        if(status) return status;

        //TODO-remove
        ocall_print("s=s_unsealed? %d\n", memcmp(s_unsealed, s_sk, SECRET_KEY_SIZE_BYTES));

        bbx.Init(s_unsealed, SECRET_KEY_SIZE_BYTES);
    }   
    
    status = bbx.Execute(B_in, B_in_size, B_out, B_out_size);
    ocall_print("bbx.Execute status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;
}