#include "../common_enclave/common_enclave.h"
#include <stdio.h>
#include <assert.h>
#include "sgx_tkey_exchange.h"
#include "sgx_tcrypto.h"
#include "string.h"
#include "../GeneralSettings.h"
#include "bb_enclave_t.h"

#include "BlackBoxExecuter.h"

/*BB enclave internal data*/
uint8_t k[SECRET_KEY_SIZE_BYTES];
sgx_ec256_private_t bb_priv_key;
BlackBoxExecuter bbx;

void ocall_print(const char* format, uint32_t number){
    char output[50];
    memset(output,0,50);
    snprintf(output, 50, format, number);
    ocall_print(output);
}

/***
[Initialization-step 1: input pk, attestation quote Q']
1. Verify that Q' is a valid Intel-signed quote that "pk was generated by [Secret-Key-Generation Enclave] running in secure mode"
2. Generate an encryption key pair (bbpk, bbsk), output bbpk.
3. Compute k=DH(bbsk, pk) the shared DH key of skg and bb
4. Use the "independent attestation" mechanism to generate an Intel-signed quote that "bbpk was generated by [X-Black-Box Enclave] running in secure mode". This is Q, output.
5. Seal (k) [sealing to MRENCLAVE] and output the sealed data.
***/
sgx_status_t bb_init_1(sgx_sealed_data_t* p_sealed_data, size_t sealed_size, 
                       sgx_ec256_public_t* p_bb_pk, sgx_ec256_public_t* p_skg_pk, size_t pk_size) {

    
    memset(k, 0, sizeof(k));
    sgx_status_t status;
    
    //Compute k=DH(bbsk, pk) the shared DH key of skg and bb
    sgx_ecc_state_handle_t handle;

    status = sgx_ecc256_open_context(&handle);
    ocall_print("sgx_ecc256_open_context status is %d\n", status);
    if(status) return status;
    
    status = sgx_ecc256_create_key_pair(&bb_priv_key, p_bb_pk, handle);
    ocall_print("sgx_ecc256_create_key_pair status is %d\n", status);
    if(status) return status;
    
    sgx_ec256_dh_shared_t shared_key;
    status = sgx_ecc256_compute_shared_dhkey(&bb_priv_key,p_skg_pk,&shared_key, handle);
    ocall_print("sgx_ecc256_compute_shared_dhkey status is %d\n", status);
    if(status) return status;

    //shared_key is k
    memcpy(k ,&shared_key, SECRET_KEY_SIZE_BYTES);

    //Seal (k) [sealing to MRENCLAVE]
    status = sgx_seal_data(0, NULL, sizeof(k), k, sealed_size, p_sealed_data);
    ocall_print("sgx_seal_data status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;

    }

/***
[Initialization-step 2: input sealed data (k), ciphertext c']
1. Unseal k
2. Decrypt c' with k to get s
3. Seal (s) [to MRENCLAVE] and output sealed data.
***/
sgx_status_t bb_init_2(sgx_sealed_data_t* p_sealed_k,                       //in (Seal(k))
                       uint8_t* s_encrypted, size_t s_encrypted_size,       //in (c')
                       sgx_sealed_data_t* p_sealed_s, size_t sealed_size)  //out (Seal(s))
{
    sgx_status_t status;

    //Unseal k
    uint8_t k_unsealed[SECRET_KEY_SIZE_BYTES];
    uint32_t unsealed_text_length = sizeof(k_unsealed);

    status = sgx_unseal_data(p_sealed_k,
                             NULL,
                             0,
                             k_unsealed, 
                             &unsealed_text_length);
                             
    ocall_print("sgx_unseal_data status is %d\n", status);
    if(status) return status;

    //TODO-remove
    ocall_print("k=k_unsealed? %d\n", memcmp(k_unsealed, k, SECRET_KEY_SIZE_BYTES));

    uint8_t s_decrypted[SECRET_KEY_SIZE_BYTES];
    memset(s_decrypted, 0, SECRET_KEY_SIZE_BYTES);

    //Decrypt c' with k to get s
    status = decrypt_key(s_decrypted, s_encrypted,k_unsealed);
    ocall_print("decrypt_key status is %d\n", status);
    if(status) return status;

    //Seal (s) [to MRENCLAVE] and output sealed data.
    status = sgx_seal_data(0, NULL, sizeof(s_decrypted), s_decrypted, sealed_size, p_sealed_s);
    ocall_print("sgx_seal_data status is %d\n", status);
    if(status) return status;

    return SGX_SUCCESS;
}



/*
[Execution: input sealed data (s), memory buffer B_in]
1. Unseal s
2. Execute B_out=X_s(B_in)
3. Output B_out
*/
sgx_status_t bb_exec(sgx_sealed_data_t* p_sealed_s,  size_t sealed_size, //in (Seal(s))
                       uint8_t* B_in, size_t B_in_size,                   //in (B_in)
                       uint8_t* B_out, size_t B_out_size)                 //out (B_out)
{
    sgx_status_t status;

    
    if(!bbx.IsInitialized())
    {
        //Unseal s
        uint8_t s_unsealed[SECRET_KEY_SIZE_BYTES];
        uint32_t unsealed_text_length = sizeof(s_unsealed);

        status = sgx_unseal_data(p_sealed_s,
                                NULL,
                                0,
                                s_unsealed, 
                                &unsealed_text_length);
                                
        ocall_print("sgx_unseal_data status is %d\n", status);
        if(status) return status;

        bbx.Init(s_unsealed, SECRET_KEY_SIZE_BYTES);
    }   
    bool ret = false;
    ret = bbx.Execute(B_in, B_in_size, B_out, B_out_size);
    ocall_print("bbx.Execute status is %d\n", ret);
    if(!ret) return SGX_ERROR_UNEXPECTED;

    return SGX_SUCCESS;
}

sgx_status_t derive_smk(sgx_ec256_public_t* p_pk, size_t pk_size, 
                        sgx_ec_key_128bit_t* p_smk, size_t smk_size) {

    return _derive_smk(p_pk, pk_size, p_smk,smk_size, &bb_priv_key);

}