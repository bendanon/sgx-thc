#ifndef SkgServer_H
#define SkgServer_H

#include <string>
#include <stdio.h>
#include <limits.h>
#include <unistd.h>
#include <iostream>
#include <iomanip>

#include "sgx_urts.h"
#include <cassert>
#include "sgx_trts.h"
#include "sgx_tcrypto.h"
#include "sgx_uae_service.h"
#include "sgx_tseal.h"
#include <stdlib.h>
#include "sgx_utils.h"
#include "../../thc/App/th_definitions.h"

#include "LogBase.h"
#include "../GeneralSettings.h"
#include "Enclave.h"
#include "Messages.pb.h"
#include "VerificationReport.h"
#include "AttestationClient.h"
#include "Network_def.h"

using namespace std;
using namespace util;

class SkgServer {

public:
    SkgServer(Enclave* pEnclave);
    virtual ~SkgServer();

    /***
    [Initialization: no input]
    1. Use SGX hardware randomness to generate shared secret key s
    2. Generate an encryption key pair (pk,sk), output pk.
    3. Use the "independent attestation" mechanism to generate an Intel-signed quote that "pk was generated by [Secret-Key-Generation Enclave] running in secure mode". This is Qâ€™, output.
    4. Seal the data (s,sk) [sealing to MRENCLAVE] and output sealed data. output.
    5. Obtain a certificate using the attestation service
    ***/
    bool Init();

    bool processPkRequest(Messages::PkRequest& pkRequest, 
                          Messages::PkResponse& pkResponse);


    bool processGetSecretRequest(Messages::GetSecretRequest& getSecretRequest, 
                                 Messages::GetSecretResponse& getSecretResponse);

private:
    bool readCertificateFromMemory();        
    bool obtainCertificate();

private:
    VerificationReport m_report;
    Enclave* m_pEnclave;
    AttestationClient* m_pClient;
    sgx_ec256_public_t* p_skg_pk = NULL;
    sgx_quote_t* p_skg_quote = NULL;
    sgx_sealed_data_t* p_sealed_s_sk = NULL;
};

#endif











