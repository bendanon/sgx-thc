enclave {
    from "sgx_tkey_exchange.edl" import *;
    include "sgx_tseal.h"
    include "sgx_key_exchange.h"
    include "sgx_trts.h"

    trusted {
        public sgx_status_t enclave_init_ra(int b_pse, [out] sgx_ra_context_t *p_context);

        public sgx_status_t enclave_ra_close(sgx_ra_context_t context);

        public sgx_status_t verify_att_result_mac(sgx_ra_context_t context,
													[in,size=message_size] uint8_t* message,
													size_t message_size,
													[in,size=mac_size] uint8_t* mac,
													size_t mac_size);

        public sgx_status_t verify_secret_data(sgx_ra_context_t context,
												[in,size=secret_size] uint8_t* p_secret,
												uint32_t secret_size,
												[in,count=16] uint8_t* gcm_mac,
												uint32_t max_verification_length,
												[out, count=16] uint8_t *p_ret);

        public sgx_status_t skg_init(
            [out, size=sealed_size]sgx_sealed_data_t* sealed_data, size_t sealed_size, 
            [out, size=pk_size]sgx_ec256_public_t* pk,size_t pk_size);

        public sgx_status_t bb_init_1(
            [out, size=sealed_size]sgx_sealed_data_t* sealed_data, size_t sealed_size, 
            [out, size=pk_size]sgx_ec256_public_t* bb_pk,
            [in, size=pk_size]sgx_ec256_public_t* skg_pk, size_t pk_size);
        
        public sgx_status_t skg_exec(
            [in, size=pk_size]sgx_ec256_public_t* p_bb_pk, 
            [in, size=pk_size]sgx_ec256_public_t* p_skg_pk, size_t pk_size,
            [in, size=sealed_size]sgx_sealed_data_t* p_sealed_s_sk, size_t sealed_size, 
            [out, size=s_encrypted_size]uint8_t* s_encrypted, size_t s_encrypted_size);
        
        public sgx_status_t bb_init_2(
            [in, size=sealed_size]sgx_sealed_data_t* p_sealed_k,
            [in, size=s_encrypted_size] uint8_t* s_encrypted, size_t s_encrypted_size, 
            [out, size=sealed_size]sgx_sealed_data_t* p_sealed_s, size_t sealed_size);
        
        
        public sgx_status_t bb_exec(
            [in, size=sealed_size]sgx_sealed_data_t* p_sealed_s, size_t sealed_size,
            [in, size=B_in_size]uint8_t* B_in, size_t B_in_size,
            [out, size=B_out_size] uint8_t* B_out, size_t B_out_size);
    };

    untrusted {
        /* define OCALLs here. */
        void ocall_print([in, string]const char* str);
    };

};












